<rss version="2.0">
<channel>
<title></title>
<link></link>
<description>Powered By <a href="http://lizheming.gitcafe.com">PMBlog</a></description>
<language>zh-cn</language>
<ttl>10</ttl>
<item>
<title><![CDATA[c++指针的指针]]></title>
<description><![CDATA[&lt;p&gt;本人最近在学习数据结构（大学没学），感觉在指针问题上需要进行更加深入的学习，才能更好的把数据结构学习和运用好。这篇文章是本人翻译的有关指针的文章(&lt;a href=&quot;http://www.eskimo.com/~scs/cclass/int/sx8.html&quot; title=&quot;Pointers to Pointers&quot;&gt;Pointers to Pointers&lt;/a&gt;)，供自己学习，有很多语法及表述不正确的地方，如果看到请指正或联系我： liuqing.phper.cn@gmail.com&lt;/p&gt;

&lt;p&gt;自从我们可以使用整型指针，字符型指针，自定义结构类型的指针，又或者,我们可以使用任何C语言的任何类型的指针。于是我们可以使用指针指向另外一个指针也就理所当然的了。&lt;/p&gt;

&lt;p&gt;如果我们曾经思考过关于指针的问题，那么去思考关于指针本身与之所指向的内容，或许更能够让我加深对指针的理解，也就是我所说的指针的指针。&lt;/p&gt;

&lt;p&gt;虽然我们能够区分，指针所指向的内容，还是指针所指向的内容的指针（当然,我们也可以去理解指向指针的指针,指向指针的指针的指针,虽然这些没有太多实际用途）。&lt;/p&gt;

&lt;p&gt;指针的指针定义如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int **ipp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;两个星号表示指针的指针。首先让我们看一个简单的例子，来演示ipp指向通过声明定义的指针类型数据（int *ip1或 int * ip2），这些指针类型数据则指向整型变量(int i,j,k)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int i = 5, j = 6; k = 7;
int *ip1 = &amp;amp;i, *ip2 = &amp;amp;j;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来对ipp赋值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ipp = &amp;amp;ip1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ipp指向 ip1，ip1指向i,即**ipp就是i，i=5。我们可以使用下图表示 &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://huliuqing.github.com/images/post-source/2014-04-30-cpp-point-to-point-1.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果我们再次设置ipp如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*ipp = ip2;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们便改变了ipp变量所指向的指针地址为ip2.因而ipp（ip1）也就指向了j,如果我们赋值如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://huliuqing.github.com/images/post-source/2014-04-30-cpp-point-to-point-2.gif&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*ipp = &amp;amp;k;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们便改变了ipp变量所指向的指针地址，为k的地址.因而ipp（ip1）也就指向了k&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://huliuqing.github.com/images/post-source/2014-04-30-cpp-point-to-point-3.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在实际应用中，指针的指针应用在哪会比较合适呢？其中一个应用案例就是：通过把普通形参替换成指针做函数返回值。为了演示和说明，我们通过传入一个简单类型（如int型）的指针类型做函数的形参，函数如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;f(int *ip)
{
    *ip = 5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后调用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int i;
f(&amp;amp;i);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调用f函数之后将会“返回” 5给函数主调函数所传入的指针类型实参。&lt;/p&gt;

&lt;p&gt;在这个示例中，主调函数为i变量。函数可以通过这种方法(传入指针类型变量)返回多个值。因为函数是只可以返回一个值。需要注意的是f函数是通过一个指针类型变量(int *)来返回值的。   &lt;/p&gt;

&lt;p&gt;现在，如果我们需要函数返回一个指针，传入的形参类型需要为指针的指针。在这有一个函数为长度为n的字符分配内存，失败返回0、成功返回1，并且返回指针指向新分配内存的指针&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;

int allocstr(int len, char **retptr)
{
    char *p = malloc(len + 1);  /* +1 for \0 */
    if(p == NULL)
        return 0;
    *retptr = p;
    return 1;
}

//主调函数如下
char *string = &quot;Hello, world!&quot;;
char *copystr;
if(allocstr(strlen(string), &amp;amp;copystr))
    strcpy(copystr, string);
else
    fprintf(stderr, &quot;out of memory\n&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（allocstr函数并非特别实用，仅仅是个简单的内存分配函数示例，为了易于调用并直接分配内存空间。我们使用的chkmalloc函数将更加实用）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;double *dptr;
if(!hypotheticalwrapperfunc(100, sizeof(double), &amp;amp;dptr))
    fprintf(stderr, &quot;out of memory\n&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hypotheticalwrapperfunc不允许传入void &lt;strong&gt;类型参数，而是需要传入double&lt;/strong&gt;类型参数
对于指针的指针，同样适用于模拟实现多维数组的动态内存分配，这将在下一章节讨论。&lt;/p&gt;

&lt;p&gt;最后一个示例，让我们看看指针的指针是如何用来解决链表中插入和删除这个令人讨厌的问题的。简单起见，我们仅仅考虑整型链表，结构体如下：&lt;/p&gt;

&lt;p&gt;struct list
    {
        int item;
        struct list *next;
    };&lt;/p&gt;

&lt;p&gt;让我们尝试从链表中删除给定的整数。简单的解决方案如下：    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* delete node containing i from list pointed to by lp */

struct list *lp, *prevlp;
for(lp = list; lp != NULL; lp = lp-&amp;gt;next)
{
    if(lp-&amp;gt;item == i)
    {
        if(lp == list)
        {
            list = lp-&amp;gt;next;
        }else
        {
            prevlp-&amp;gt;next = lp-&amp;gt;next;
            break;
        }
        prevlp = lp;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码是可以运行的，但是存在两个不足之处。
    第一、我们需要使用一个额外的变量来保存节点与节点的关系。
    第二、当节点在链表头部被删除，我们需要使用额外的测试。为什么会出现这两个不足，原因在于我们从链表中删除一个节点，会涉及到指针所指向的节点需要移动到下一个节点（删除节点的前一节点的指针，需要指向删除节点的下一节点）。但这取决于删除节点是不是头一个节点，如果是头一个节点我们需要时指针指向链表的新头部，如果不是我们需要将删除节点的前一个节点的指针指向下一个节点。&lt;/p&gt;

&lt;p&gt;为了阐明这一点，加点我们有一个链表 list(1,2,3)。让我们从表中删除节点1。当我们找到1节点时，指针变量lp指向节点1，而链表list的指针其实也是指向同一个节点1的，如下图（a）所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://huliuqing.github.com/images/post-source/2014-04-30-cpp-point-to-point-4.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;删除节点1之后，我们需要使链表list的指针指向链表的第二个节点，也就是链表新的头结点（图（b）所示）。&lt;/p&gt;

&lt;p&gt;假使我们需要删除的是元素的节点2（如图（c）所示）。&lt;/p&gt;

&lt;p&gt;我们则需要让链表的第一个节点的指针指向节点3。&lt;/p&gt;

&lt;p&gt;指针变量prevlp要保存前一个节点，因为我们需要让它的下一个节点做出调整（另外我们要注意的是如果我们要删除第三个节点，我们要把它所指向下一个节点地址，复制给节点2，但节点3的下一个节点地址为空，所以此时节点2就是链表新的尾节点）。&lt;/p&gt;

&lt;p&gt;让我们再来重写链表的删除操作，通过运用链表指针的指针，新的实现方法更加简单。这个指针将指向我们所查找节点的指针，它既可以指向头指针也可以指向下一个节点指针。直到这个指针所指向的指针，是指向我们需要查找的节点时为止，它指向我们查找并需要修改删除的节点指针。让我们来看看代码。&lt;/p&gt;

&lt;p&gt;struct list **lpp;
    for(lpp = &amp;list; &lt;em&gt;lpp != NULL; lpp = &amp;amp;(&lt;/em&gt;lpp)-&gt;next)
    {
        if( (&lt;em&gt;lpp)-&gt;item == i)
        {
            *lpp = (&lt;/em&gt;lpp)-&gt;next;
            break;&lt;br /&gt;
        }
    }&lt;/p&gt;

&lt;p&gt;代码 &lt;em&gt;lpp = (&lt;/em&gt;lpp)-&gt;next会更新当前的指针，不论是头指针还是其中的任何一个指针（当然初见之下，在链表上运用指针的指针，所采用的算法并不会带来多大的好处）。为了简单阐述指针的指针在lpp变量上的操作，通过两张图来演示删除第一个节点（左图）和第二个节点（右图）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://huliuqing.github.com/images/post-source/2014-04-30-cpp-point-to-point-5.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在以上两个链表删除操作的示例中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;① lpp变量所指向的是，一个指向被删除节点的节点指针。
② lpp所指向的指针，是将被更新的指针。
③ 新的指针（*lpp更新的指针）是被删除节点的下一个指针，它永远是(*lpp)-&amp;gt;next
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*lpp所指向的下一个节点指针，也就是lpp所指向的指针的指针。可以替换如下： &lt;/p&gt;

&lt;p&gt;lpp = &amp;amp;(*lpp)-&gt;next&lt;/p&gt;

&lt;p&gt;通过&lt;em&gt;lpp,将lpp指向list链表的下一个域。不管怎样括号都不能省略，因为-&gt;优先级高于&lt;/em&gt;的优先级。&lt;/p&gt;

&lt;p&gt;接下来让我们看一个相关的示例，让我们在list链表中插入一个新的节点。同样适用list链表结构的指针的指针，这样，我们就不用来区别对待list链表在不同情况下的插入了。&lt;/p&gt;

&lt;p&gt;/* insert node newlp into list */&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct list **lpp;
for(lpp = &amp;amp;list; *lpp != NULL; lpp = &amp;amp;(*lpp)-&amp;gt;next)
{
    struct list *lp = *lpp;
    if(newlp-&amp;gt;item &amp;lt; lp-&amp;gt;item)
    {
        newlp-&amp;gt;next = lp;
        *lpp = newlp;
        break;
    }
}
&lt;/code&gt;&lt;/pre&gt;
]]></description>
<pubDate>2014-04-30T14:30:00+08:00</pubDate>
<guid>http://huliuqing.github.io/2014-04-30-cpp-pointers-to-pointers.html</guid>
<link>http://huliuqing.github.io/2014-04-30-cpp-pointers-to-pointers.html</link>
</item>
<item>
<title><![CDATA[个人书单]]></title>
<description><![CDATA[&lt;p&gt;过去三年，在位于江西南昌的一家初创公司从事PHP相关开发工作，且行且努力。以下列出个人这三年阅读的图书&lt;/p&gt;

&lt;h2&gt;目标&lt;/h2&gt;

&lt;p&gt;领域内深入 、 领域外涉猎&lt;/p&gt;

&lt;h2&gt;编程语言&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;《java核心技术（卷一、卷二）》 --2011年8-10月份&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《c++探秘：68讲贯通C++》--2012年1-2月份&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《PHP和MySql web开发》  --2012年4-5月份&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《高性能php应用开发》   --2012年10-11月份&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《PHP调试技术手册》     --2013年7月份&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;前端 css&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;《CSS禅意花园》  --2013年2-3月份&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《CSS实战手册》  --2013年5-6月份&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;前端 javascript&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;《javascript DOM编程艺术》 --2013年7月份&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《Node.js 入门指南》       --2013年8月份&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;数据库&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;《Oracle 10g宝典》 --2011年11-12月份&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《SQLCOOKBOK》&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;阅读手册&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;php手册  http://php.net  --2012年3月至今&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;正在阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;《php高级程序设计 -模式、框架与调试》&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《MySQL技术内幕InnoDB存储引擎》&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《无懈可击的web项目》&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《面向对象分析与设计（第三版）》&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;想要阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;《大话设计模式》&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《大话数据结构》&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《章亦春nginx漫谈》&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《apache手册》&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《apache手册》&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
]]></description>
<pubDate>2014-04-28T17:13:00+08:00</pubDate>
<guid>http://huliuqing.github.io/book-lists.html</guid>
<link>http://huliuqing.github.io/book-lists.html</link>
</item>
<item>
<title><![CDATA[个人技能一览]]></title>
<description><![CDATA[&lt;script type=&quot;text/javascript&quot; src=&quot;http://visjs.org/dist/vis.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;在这边梳理一下个人所学习过，并且一直在学习的专业技能，当然还有很多没有学习到的内容。
但在此还是写梳理出掌握的比较好。也算是对自己这3年来的一个交代吧&lt;/p&gt;

&lt;div id=&quot;skills&quot;&gt;&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
  // create an array with nodes
  var nodes = [
    {id: 1, label: &#039;已掌握Web开发技能&#039;,color:&#039;rgb(61,89,159)&#039;,fontColor:&#039;#fff&#039;},
    {id: 2, label: &#039;客户端编程&#039;},
    {id: 3, label: &#039;服务器端编程&#039;},
    {id: 4, label: &#039;数据库存储&#039;},
    {id: 5, label: &#039;html&#039;,color:&#039;rgb(61,89,159)&#039;,fontColor:&#039;#fff&#039;},
    {id: 6, label: &#039;css&#039;,color:&#039;rgb(61,89,159)&#039;,fontColor:&#039;#fff&#039;},
    {id: 7, label: &#039;javascript&#039;,color:&#039;rgb(61,89,159)&#039;,fontColor:&#039;#fff&#039;},
    {id: 8, label: &#039;历史标准语规范&#039;},
    {id: 9, label: &#039;常用标签与属性&#039;},
    {id: 10, label: &#039;DOM / BOM&#039;},
    {id: 11, label: &#039;语法、继承规则&#039;},
    {id: 12, label: &#039;选择器与常用属性&#039;},
    {id: 13, label: &#039;基本布局与定位知识&#039;},
    {id: 14, label: &#039;css禅意花园与css实战手册&#039;},
    {id: 15, label: &#039;ajax基础知识&#039;},
    {id: 16, label: &#039;jquery基础知识&#039;},
    {id: 17, label: &#039;javascript  javascript DOM 编程艺术(2th)&#039;},
    {id: 18, label: &#039;前端基础优化知识&#039;},
    {id: 19, label: &#039;PHP&#039;,color:&#039;rgb(61,89,159)&#039;,fontColor:&#039;#fff&#039;},
    {id: 20, label: &#039;HTTP&#039;,color:&#039;rgb(61,89,159)&#039;,fontColor:&#039;#fff&#039;},
    {id: 21, label: &#039;知识方法与可读性&#039;,color:&#039;rgb(61,89,159)&#039;,fontColor:&#039;#fff&#039;},
    {id: 22, label: &#039;php语言 、手册核心内容阅读完&#039;},
    {id: 23, label: &#039;源码阅读Zend1.0/Typecho/ucenter&#039;},
    {id: 24, label: &#039;框架Zend/smarty&#039;},
    {id: 30, label: &#039;php运行时配置与性能优化&#039;},
    {id: 31, label: &#039;php生命周期与变量等内核实现&#039;},
    {id: 25, label: &#039;http基础知识&#039;},
    {id: 26, label: &#039;代码可读性&#039;},
    {id: 27, label: &#039;web基础安全知识与SQL注入&#039;},
    {id: 28, label: &#039;设计模式 学习中&#039;},
    {id: 29, label: &#039;基础缓存策略与php调试技术手册&#039;},
    {id: 32, label: &#039;mysql数据库&#039;,color:&#039;rgb(61,89,159)&#039;,fontColor:&#039;#fff&#039;},
    {id: 33, label: &#039;DML/DQL/DDL&#039;},
    {id: 34, label: &#039;数据类型/函数&#039;},
    {id: 35, label: &#039;事务、存储过程、视图基础知识&#039;},
    {id: 36, label: &#039;基础sql优化策略&#039;},
  ];

  // create an array with edges
  var edges = [
    {from: 1, to: 2,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 1, to: 3,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 1, to: 4,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 2, to: 5,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 2, to: 6,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 2, to: 7,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 5, to: 8,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 5, to: 9,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 5, to: 10,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 6, to: 11,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 6, to: 12,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 6, to: 13,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 6, to: 14,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 7, to: 15,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 7, to: 16,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 7, to: 17,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 7, to: 18,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 3, to: 19,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 3, to: 20,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 3, to: 21,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 19, to: 22,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 19, to: 23,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 19, to: 24,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 19, to: 30,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 19, to: 31,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 20, to: 25,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 21, to: 26,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 21, to: 27,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 21, to: 28,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 21, to: 29,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 4, to: 32,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 32, to: 33,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 32, to: 34,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 32, to: 35,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}},
    {from: 32, to: 36,style: &#039;dash-line&#039;, dash: {length: 5, gap: 5}}
  ];

  // create a graph
  var container = document.getElementById(&#039;skills&#039;);
  var data= {
    nodes: nodes,
    edges: edges
  };
  var options = {
    nodes: {
      shape: &#039;box&#039;
    },
    edges: {
      length: 700
    },
    width:&#039;800px&#039;,
    height:&#039;800px&#039;
  };
  var graph = new vis.Graph(container, data, options);
&lt;/script&gt;
]]></description>
<pubDate>2014-04-25T16:48:00+08:00</pubDate>
<guid>http://huliuqing.github.io/web-skills-me.html</guid>
<link>http://huliuqing.github.io/web-skills-me.html</link>
</item>
<item>
<title><![CDATA[PMBlog links 和menus使用介绍]]></title>
<description><![CDATA[&lt;p&gt;最近我一直有在积累的博客，被关闭了。现在才体会到为什么不能够寄住在别人的博客平台，记录和分享工作中的点滴。&lt;/p&gt;

&lt;p&gt;在这里我想对51CTO的全体工作人员说一句&#039;cao 草&#039;，能不能联系你们并回复下我。&lt;/p&gt;

&lt;p&gt;没办法想到了在github可以开通自己的blog，尝试了一下。不过在使用jekyll的时候环境一直无法搭建，感谢公司&lt;/p&gt;

&lt;p&gt;万幸在强大的github上，找到了PMBlog，谢谢&lt;a href=&quot;https://github.com/lizheming&quot;&gt;公子&lt;/a&gt;（类似jekyll）。现在介绍关于PMBlog程序中links和menus插件的相关使用方法&lt;/p&gt;

&lt;h2&gt;PMBlog的links链接和menus导航基本介绍&lt;/h2&gt;

&lt;p&gt;通过如下地址下载需要的插件&lt;a href=&quot;https://github.com/lizheming/PMBlog/wiki/%E6%8F%92%E4%BB%B6&quot;&gt;PMBlog 插件&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里我下载的是 Page2Link 和 Page2Menu插件，并放置到usr/plugin目录下&lt;/p&gt;

&lt;p&gt;Page2Link插件&lt;/p&gt;

&lt;blockquote&gt;友情链接插件，按照links.example.html的格式（其实就是Markdown的链接格式）将链接一行一个写好，保存成links.html。主题模板中可以使用{{link}}变量调用它。{{link}}变量是一个数组变量，需要使用循环才能输出&lt;/blockquote&gt;

&lt;p&gt;Page2Menu插件&lt;/p&gt;

&lt;blockquote&gt;导航链接插件，按照menus.example.html的格式（其实就是Markdown的链接格式）将链接一行一个写好，保存成menus.html。主题模板中可以使用{{menus}}变量调用它。{{menus}}变量是一个数组变量，需要使用循环才能输出&lt;/blockquote&gt;

&lt;h2&gt;插件使用&lt;/h2&gt;

&lt;p&gt;关于这两个的插件使用也是非常的简单的，我们只需要&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 配置config.php文件
$config[&#039;actived_plugins&#039;] =&quot;Page2Links,Page2Menus&quot; //我们也可以简单的使用*开启全部的插件
# 使用
在模板文件中，我们仅仅需要添加如下代码便可以完成，link/menu的功能
{% for item in menu/link %}
    {{item.title}}  {# MenuItem&#039;s title #}
    {{item.url}}    {# MenuItem&#039;s url #}
    {{item.description}}    {# MenuItem&#039;s description #}
 {% endfor %}
&lt;/code&gt;&lt;/pre&gt;
]]></description>
<pubDate>2014-04-24T14:13:34+08:00</pubDate>
<guid>http://huliuqing.github.io/introduce-pmblog-lins-menus.html</guid>
<link>http://huliuqing.github.io/introduce-pmblog-lins-menus.html</link>
</item>
<item>
<title><![CDATA[关于我 / About Me]]></title>
<description><![CDATA[&lt;p&gt;柳公子&lt;/p&gt;

&lt;h2&gt;出生&amp;求学&lt;/h2&gt;

&lt;p&gt;我出生在江西九江的一个农村。
12岁以前过着无忧无虑的生活：春天放牛、夏天钓虾，冬天烤炭火。
12-23岁开始一个人的求学路，借读初中、高中，再然后于江西南昌读大学&lt;/p&gt;

&lt;h2&gt;教育&lt;/h2&gt;

&lt;p&gt;2007年9月入学江西南昌大学软件学院，软件技术专业。开始程序开发之路&lt;/p&gt;

&lt;h2&gt;经历&lt;/h2&gt;

&lt;p&gt;关于我的经历，2008年之后才慢慢开始精彩起来&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2008年入伍&lt;/li&gt;
&lt;li&gt;2010年退役&lt;/li&gt;
&lt;li&gt;2011年续学&lt;/li&gt;
&lt;li&gt;2011年底进入江西腾王科技开发游戏。结果进入web开发领域，从事PHP开发相关工作至今&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;联系我&lt;/h2&gt;

&lt;p&gt;可以通过以下方式联系到我：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gmail:huliuqing1989@gmail.com&lt;/li&gt;
&lt;li&gt;weibo:http://weibo.com/focusliuqing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;关注我&lt;/h2&gt;

&lt;p&gt;作为伪技术型宅男，偶尔会出现在这些地方。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stackoverflow : http://stackoverflow.com/users/1969039/liuqing-hu&lt;/li&gt;
&lt;li&gt;github : https://github.com/huliuqing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;目标&lt;/h2&gt;

&lt;p&gt;为成为正真的技术型宅男而努力奋斗&lt;/p&gt;
]]></description>
<pubDate>2014-04-22T16:25:02+08:00</pubDate>
<guid>http://huliuqing.github.io/aboutme.html</guid>
<link>http://huliuqing.github.io/aboutme.html</link>
</item>
</channel>
</rss>